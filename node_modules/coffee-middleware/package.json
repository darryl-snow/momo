{
  "author": {
    "name": "Uber",
    "email": "erik@uber.com",
    "url": "http://github.com/uber"
  },
  "name": "coffee-middleware",
  "description": "coffee-script middleware for connect.",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/uber/coffee-middleware.git"
  },
  "main": "lib/middleware.js",
  "dependencies": {
    "coffee-script": ">= 1.4.0",
    "mkdirp": ">= 0.3.1"
  },
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "dist": {
    "shasum": "fe2fac10935193ea6709d15633717720d759df09"
  },
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "license": "MIT",
  "keywords": [
    "coffee-script",
    "middleware",
    "express",
    "connect"
  ],
  "readme": "## YO!\nThis is adapted from the [less middleware](https://npmjs.org/package/less-middleware) written by [zoramite](https://npmjs.org/~zoramite)\nI have simply gone through and replaced anything that is less specific and replaced it with the coffee-script equivalent.\n\n## Installation\n\n    sudo npm install coffee-middleware\n\n## Options\n\n<table>\n    <thead>\n        <tr>\n            <th>Option</th>\n            <th>Description</th>\n            <th>Default</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <th><code>force</code></th>\n            <td>Always re-compile coffee-script files on each request.</td>\n            <td><code>false</code></td>\n        </tr>\n        <tr>\n            <th><code>once</code></th>\n            <td>Only check for need to recompile once after each server restart. Useful for reducing disk i/o on production.</td>\n            <td><code>false</code></td>\n        </tr>\n        <tr>\n            <th><code>debug</code></th>\n            <td>Output any debugging messages to the console.</td>\n            <td><code>false</code></td>\n        </tr>\n        <tr>\n            <th><code>src</code></th>\n            <td>Source directory containing the <code>.coffee</code> files. <strong>Required.</strong></td>\n            <td></td>\n        </tr>\n        <tr>\n            <th><code>dest</code></th>\n            <td>Desitnation directory to output the compiled <code>.js</code> files.</td>\n            <td><code>&lt;src&gt;</code></td>\n        </tr>\n        <tr>\n            <th><code>prefix</code></th>\n            <td>Path which should be stripped from the public <code>pathname</code>.</td>\n            <td></td>\n        </tr>\n    </tbody>\n</table>\n\n## Examples\n\n### Connect\n\n    var coffeeMiddleware = require('coffee-middleware');\n\n    var server = connect.createServer(\n        coffeeMiddleware({\n            src: __dirname + '/public',\n            compress: true\n        }),\n        connect.staticProvider(__dirname + '/public')\n    );\n\n### Express\n\n    var coffeeMiddleware = require('coffee-middleware');\n\n    var app = express.createServer();\n\n    app.configure(function () {\n        // Other configuration here...\n\n        app.use(coffeeMiddleware({\n            src: __dirname + '/public',\n            compress: true\n        }));\n\n        app.use(express.static(__dirname + '/public'));\n    });\n\n### Express - Different `src` and `dest`\n\nWhen using a different `src` and `dest` you can use the `prefix` option to make the directory structure cleaner.\n\nRequests for static assets (like javascripts) made to the express server use a `pathname` to look up the file. So if the request is for `http://localhost/js/main.js` the `pathname` will be `/js/main.js`.\n\nThe middleware uses that path to determine where to look for coffee-script files. In the original example it looks for the `.coffee` file at `/public/js/main.coffee` and compiles it to `/public/js/main.js`.\n\nIf you are using a different `src` and `dest` options it causes for more complex directories structures unless you use the `prefix` option. For example, without the `prefix`, and with a `src` of `/src/coffee` and a `dest` of `/public` it would look for the `.coffee` file at `/src/coffee/js/main.coffee` and compile it to `/public/js/main.js`. To make it cleaner you can use the `prefix` option:\n\n    var coffeeMiddleware = require('coffee-middleware');\n\n    var app = express.createServer();\n\n    app.configure(function () {\n        // Other configuration here...\n\n        app.use(coffeeMiddleware({\n            dest: __dirname + '/public/js',\n            src: __dirname + '/src/coffee',\n            prefix: '/js',\n            compress: true\n        }));\n\n        app.use(express.static(__dirname + '/public'));\n    });\n\nUsing the `prefix` it changes the `pathname` from `/js/main.js` to `/main.coffee`. With that prefix removed from the `pathname` it makes things cleaner. With the `prefix` removed it would look for the `.coffee` file at `/src/coffee/main.coffee` and compile it to `/public/js/main.js`.\n",
  "readmeFilename": "README.md",
  "_id": "coffee-middleware@0.0.2",
  "_from": "coffee-middleware@*"
}
